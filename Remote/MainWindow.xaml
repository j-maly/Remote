<Controls:MetroWindow x:Class="Remote.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:Controls="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro"
        xmlns:local="clr-namespace:Remote"
        xmlns:utils="clr-namespace:Remote.Utils"
        xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
        mc:Ignorable="d"
        Title="Remote" Height="500" Width="650" ShowIconOnTitleBar="True" 
        BorderBrush="{DynamicResource AccentColorBrush}"
        BorderThickness="1"
        x:Name="Root"
        d:DataContext="{d:DesignInstance Type=local:ViewModel, IsDesignTimeCreatable=True}">
    <Window.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Resources/Icons.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <utils:InverseBooleanConverter x:Key="Invert" />
            <utils:LinesToTextConverter x:Key="LinesToText" />
        </ResourceDictionary>
    </Window.Resources>
    <Controls:MetroWindow.RightWindowCommands>
        <Controls:WindowCommands>
            <!--<Button Content="settings" />-->
            <Button Command="{Binding RefreshCommand}" ToolTip="Refresh">
                <StackPanel Orientation="Horizontal">
                    <Rectangle Width="15" Height="15"
                               Fill="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=Foreground}">
                        <Rectangle.OpacityMask>
                            <VisualBrush Stretch="Fill" Visual="{StaticResource appbar_refresh}" />
                        </Rectangle.OpacityMask>
                    </Rectangle>
                </StackPanel>
            </Button>
        </Controls:WindowCommands>
    </Controls:MetroWindow.RightWindowCommands>
    <Grid Margin="10,0,10,10">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto"/>
            <ColumnDefinition Width="250"/>
            <ColumnDefinition/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="50"/>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="3" />
            <RowDefinition Height="100" />
        </Grid.RowDefinitions>
        <TabControl Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="3" 
                    ItemsSource="{Binding Path=Config.Machines}"
                    SelectedItem="{Binding Machine, Mode=TwoWay}">
            <TabControl.ItemTemplate>
                <DataTemplate>
                    <TextBlock Text="{Binding Label}"/>
                </DataTemplate>
            </TabControl.ItemTemplate>
            <TabControl.ContentTemplate>
                <DataTemplate>
                </DataTemplate>
            </TabControl.ContentTemplate>
        </TabControl>
        <Label Grid.Row="1" Grid.Column="0" Content="Name pattern:" VerticalAlignment="Bottom" Margin="4,0,0,5" />
        <TextBox Grid.Row="1" Grid.Column="1"
                 Text="{Binding NamePattern, UpdateSourceTrigger=PropertyChanged, Delay=300}" Margin="0,5,0,5"/>
        <DataGrid Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="3" 
                  ItemsSource="{Binding DisplayedServicesView}"
                  SelectedItem="{Binding SelectedService}"
                  x:Name="ServicesGrid" EnableRowVirtualization="True"
                  IsEnabled="{Binding IsBusy, Converter={StaticResource Invert}}"
                  AutoGenerateColumns="False" CanUserAddRows="False" CanUserDeleteRows="False" 
                  BorderThickness="1" BorderBrush="{StaticResource NonActiveBorderColorBrush}">
            <DataGrid.Columns>
                <DataGridTemplateColumn Header="Service Name" IsReadOnly="True" MinWidth="250" Width="Auto">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate DataType="local:ServiceInfo">
                            <TextBlock Text="{Binding Name}" 
                                       VerticalAlignment="Top" Margin="5,0" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <!--<DataGridTemplateColumn Header="Startup Type" SortMemberPath="StartupType">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate DataType="local:ServiceInfo">
                            <TextBlock Text="{Binding StartupType}" VerticalAlignment="Top" Margin="20,0" />
                            --><!--ContextMenu="{StaticResource StartupTypeMenu}"--><!--
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>-->
                <DataGridTemplateColumn Header="Startup Type" SortMemberPath="StartupType" IsReadOnly="False">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate DataType="local:ServiceInfo">
                            <ComboBox SelectedValue="{Binding Path=StartupType, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                      SelectedValuePath="Content">
                                <ComboBoxItem>Automatic</ComboBoxItem>
                                <ComboBoxItem>Manual</ComboBoxItem>
                                <ComboBoxItem>Disabled</ComboBoxItem>
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="SelectionChanged">
                                        <i:InvokeCommandAction Command="{Binding Path=DataContext.ChangeStartupTypeCommand, ElementName=Root}" />
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>
                            </ComboBox>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTextColumn Header="Status" Binding="{Binding Status}" IsReadOnly="True" />
                <DataGridTemplateColumn SortMemberPath="Status" Width="60">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate DataType="local:ServiceInfo">
                            <Controls:ToggleSwitchButton 
                                Command="{Binding Path=DataContext.StartStopServiceCommand, ElementName=Root}"
                                IsChecked="{Binding IsRunning, Mode=OneWay}"                                                   
                                VerticalAlignment="Bottom" Margin="0,0,5,0" Height="25" Width="50">
                            </Controls:ToggleSwitchButton>
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Width="90">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate DataType="local:ServiceInfo">
                            <Button Content="Open Log" FontSize="10" Margin="5,0"
                                    Command="{Binding Path=DataContext.OpenServiceLogCommand, ElementName=Root}" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
        </DataGrid>
        <GridSplitter Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="3" Height="3" 
                      VerticalAlignment="Stretch" HorizontalAlignment="Stretch" ResizeDirection="Rows" />
        <TextBox Grid.Row="4" Grid.Column="0" Grid.ColumnSpan="3" 
                 BorderThickness="1" BorderBrush="{StaticResource NonActiveBorderColorBrush}"
                 Text="{Binding LogDisplay, Mode=OneWay, Converter={StaticResource LinesToText}}" IsReadOnly="true"
                 TextWrapping="Wrap" VerticalScrollBarVisibility="Auto" AcceptsReturn="True"
                 TextChanged="TextBox_ScrollToEnd"/>
    </Grid>
</Controls:MetroWindow>
